"{\"value\":{\"mdx\":\"# Cross Chain USDC Transfers with Bridge Kit\\n\\n:::info\\nThis guide is maintained by [Circle](https://www.circle.com).\\n:::\\n\\n## Overview\\n\\nThis quickstart guide helps you write a script that transfers USDC from Base to Ethereum using [Bridge Kit](https://learn.circle.com/bridge-kit).\\n\\nBridge Kit is a high-level SDK that lets you start bridging in just 10 lines of code. It provides:\\n\\n* **Hundreds of bridge routes** – Transfer between dozens of supported blockchains\\n* **Simple setup** – Start bridging in 10 lines of code\\n* **Fee collection** – Monetize your application by collecting fees from end-users\\n* **Custom configurations** – Specify transfer speeds, custom RPC endpoints, and wallet clients\\n* **Multiple wallet support** – Works with Viem, Ethers, MetaMask, Phantom, and more\\n* **Smart retry capabilities** – Automatically identify and recover stuck transactions\\n\\nBy the end, you'll know how to:\\n\\n* Install Bridge Kit and its dependencies\\n* Configure your environment with private keys\\n* Execute a cross-chain USDC transfer from Base to Ethereum\\n* Verify the transfer on the blockchain\\n\\n## Steps\\n\\n::::steps\\n\\n### Prerequisites\\n\\nBefore you begin, ensure that you've:\\n\\n* Installed Node.js v22+ and npm\\n* Created an Ethereum Sepolia wallet and Base Sepolia wallet. You will fund these wallets in this quickstart.\\n\\n### Set up your development environment\\n\\nCreate a new directory and install Bridge Kit and its dependencies:\\n\\n```bash\\n# Setup your directory and initialize a Node.js project\\nmkdir bridge-kit-quickstart-transfer-base-to-eth\\ncd bridge-kit-quickstart-transfer-base-to-eth\\nnpm init -y\\n\\n# Install Bridge Kit and tools\\nnpm install @circle-fin/bridge-kit @circle-fin/adapter-viem-v2 viem typescript tsx dotenv\\n```\\n\\n### Initialize and configure the project\\n\\nFirst, initialize the project, which creates a `tsconfig.json` file:\\n\\n```bash\\n# Initialize a TypeScript project\\nnpx tsc --init\\n```\\n\\nThen, edit the `tsconfig.json` file:\\n\\n```bash\\n# Replace the contents of the generated file\\ncat <<'EOF' > tsconfig.json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"ESNext\\\",\\n    \\\"module\\\": \\\"ESNext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"strict\\\": true\\n  }\\n}\\nEOF\\n```\\n\\n### Configure environment variables\\n\\nCreate a `.env` file in the project directory and add your wallet private key, replacing `{YOUR_PRIVATE_KEY}` with the private key for your Ethereum Sepolia wallet. (You can find and export your private key in MetaMask.)\\n\\n```bash\\necho \\\"PRIVATE_KEY={YOUR_PRIVATE_KEY}\\\" > .env\\n```\\n\\n:::warning\\nNever commit your private key to version control. Use environment variables or a secure key management system.\\n:::\\n\\n### Fund your wallets\\n\\nFor this quickstart, you need both USDC and native tokens in your Ethereum testnet wallet and native tokens in your Base testnet wallet. If you need USDC testnet tokens, use the [Circle Faucet](https://faucet.circle.com) to get 10 USDC in your Ethereum testnet wallet.\\n\\nUse the following faucets to get testnet native tokens in your wallets:\\n\\n* [Ethereum Sepolia faucet](https://sepoliafaucet.com)\\n* [Base Sepolia faucet](https://www.alchemy.com/faucets/base-sepolia)\\n\\n:::tip\\nInstead of using the Base Sepolia faucet, you can use the Ethereum Sepolia faucet to transfer some tokens to Base.\\n:::\\n\\n### Create the transfer script\\n\\nCreate an `index.ts` file in the project directory and add the following code. This code sets up your script and transfers 10 USDC from Base to Ethereum:\\n\\n```ts [index.ts]\\n// Import Bridge Kit and its dependencies\\nimport \\\"dotenv/config\\\";\\nimport { BridgeKit } from \\\"@circle-fin/bridge-kit\\\";\\nimport { createAdapterFromPrivateKey } from \\\"@circle-fin/adapter-viem-v2\\\";\\nimport { inspect } from \\\"util\\\";\\n\\n// Initialize the SDK\\nconst kit = new BridgeKit();\\n\\nconst bridgeUSDC = async (): Promise<void> => {\\n  try {\\n    // Initialize the adapter which lets you transfer tokens from your wallet on any EVM-compatible chain\\n    const adapter = createAdapterFromPrivateKey({\\n      privateKey: process.env.PRIVATE_KEY as string,\\n    });\\n\\n    console.log(\\\"---------------Starting Bridging---------------\\\");\\n\\n    // Execute the transfer using the same adapter for both source and destination chain\\n    const result = await kit.bridge({\\n      from: { adapter, chain: \\\"Base_Sepolia\\\" },\\n      to: { adapter, chain: \\\"Ethereum_Sepolia\\\" },\\n      amount: \\\"10\\\",\\n    });\\n\\n    console.log(\\\"RESULT\\\", inspect(result, false, null, true));\\n  } catch (err) {\\n    console.log(\\\"ERROR\\\", inspect(err, false, null, true));\\n  }\\n};\\n\\nvoid bridgeUSDC();\\n```\\n\\n### Run the transfer\\n\\nSave the `index.ts` file and run the script in your terminal:\\n\\n```bash\\nnpx tsx index.ts\\n```\\n\\n### Verify the transfer\\n\\nAfter your script completes, find the returned `steps` array in the terminal output. Each transaction step includes an `explorerUrl` that you can visit to verify that the USDC amount matches the amount you transferred.\\n\\nThe following code is an example of how an `approve` step might look in the terminal output. The values are used in this example only and are not a real transaction:\\n\\n```bash\\nsteps: [\\n  {\\n    name: \\\"approve\\\",\\n    state: \\\"success\\\",\\n    txHash: \\\"0x...txHash\\\",\\n    data: {\\n      txHash:\\n        \\\"0x...txHash\\\",\\n      status: \\\"success\\\",\\n      cumulativeGasUsed: 24567891n,\\n      gasUsed: 52843n,\\n      blockNumber: 8921456n,\\n      blockHash:\\n        \\\"0x...blockHash\\\",\\n      transactionIndex: 245,\\n      effectiveGasPrice: 1523456n,\\n      explorerUrl:\\n        \\\"https://sepolia.etherscan.io/tx/0x...txHash\\\",\\n    },\\n  },\\n]\\n```\\n\\n:::tip\\n[Collect a fee on transfers](https://learn.circle.com/bridge-kit/tutorials/collect-a-transfer-fee) and [estimate gas and provider fees](https://learn.circle.com/bridge-kit/tutorials/estimate-costs) before a transfer, only proceeding if the cost is acceptable.\\n:::\\n\\n::::\\n\",\"document\":[{\"href\":\"/circle-usdc/guides/bridge-kit#cross-chain-usdc-transfers-with-bridge-kit\",\"html\":\"</header>\\n<aside data-callout=\\\"info\\\"><p>This guide is maintained by <a href=\\\"https://www.circle.com\\\">Circle</a>.</p></aside>\\n\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#cross-chain-usdc-transfers-with-bridge-kit\",\"isPage\":true,\"text\":\"\\nThis guide is maintained by Circle.\\n\",\"title\":\"Cross Chain USDC Transfers with Bridge Kit\",\"titles\":[]},{\"href\":\"/circle-usdc/guides/bridge-kit#overview\",\"html\":\"\\n<p>This quickstart guide helps you write a script that transfers USDC from Base to Ethereum using <a href=\\\"https://learn.circle.com/bridge-kit\\\">Bridge Kit</a>.</p>\\n<p>Bridge Kit is a high-level SDK that lets you start bridging in just 10 lines of code. It provides:</p>\\n<ul>\\n<li><strong>Hundreds of bridge routes</strong> – Transfer between dozens of supported blockchains</li>\\n<li><strong>Simple setup</strong> – Start bridging in 10 lines of code</li>\\n<li><strong>Fee collection</strong> – Monetize your application by collecting fees from end-users</li>\\n<li><strong>Custom configurations</strong> – Specify transfer speeds, custom RPC endpoints, and wallet clients</li>\\n<li><strong>Multiple wallet support</strong> – Works with Viem, Ethers, MetaMask, Phantom, and more</li>\\n<li><strong>Smart retry capabilities</strong> – Automatically identify and recover stuck transactions</li>\\n</ul>\\n<p>By the end, you&#x27;ll know how to:</p>\\n<ul>\\n<li>Install Bridge Kit and its dependencies</li>\\n<li>Configure your environment with private keys</li>\\n<li>Execute a cross-chain USDC transfer from Base to Ethereum</li>\\n<li>Verify the transfer on the blockchain</li>\\n</ul>\\n\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#overview\",\"isPage\":false,\"text\":\"\\nThis quickstart guide helps you write a script that transfers USDC from Base to Ethereum using Bridge Kit.\\nBridge Kit is a high-level SDK that lets you start bridging in just 10 lines of code. It provides:\\n\\nHundreds of bridge routes – Transfer between dozens of supported blockchains\\nSimple setup – Start bridging in 10 lines of code\\nFee collection – Monetize your application by collecting fees from end-users\\nCustom configurations – Specify transfer speeds, custom RPC endpoints, and wallet clients\\nMultiple wallet support – Works with Viem, Ethers, MetaMask, Phantom, and more\\nSmart retry capabilities – Automatically identify and recover stuck transactions\\n\\nBy the end, you&#x27;ll know how to:\\n\\nInstall Bridge Kit and its dependencies\\nConfigure your environment with private keys\\nExecute a cross-chain USDC transfer from Base to Ethereum\\nVerify the transfer on the blockchain\\n\\n\",\"title\":\"Overview\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#steps\",\"html\":\"\\n<div data-vocs-steps=\\\"true\\\"><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#steps\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Steps\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#prerequisites\",\"html\":\"<p>Before you begin, ensure that you&#x27;ve:</p><ul>\\n<li>Installed Node.js v22+ and npm</li>\\n<li>Created an Ethereum Sepolia wallet and Base Sepolia wallet. You will fund these wallets in this quickstart.</li>\\n</ul></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#prerequisites\",\"isPage\":false,\"text\":\"Before you begin, ensure that you&#x27;ve:\\nInstalled Node.js v22+ and npm\\nCreated an Ethereum Sepolia wallet and Base Sepolia wallet. You will fund these wallets in this quickstart.\\n\",\"title\":\"Prerequisites\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#set-up-your-development-environment\",\"html\":\"<p>Create a new directory and install Bridge Kit and its dependencies:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Setup your directory and initialize a Node.js project</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">mkdir</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> bridge-kit-quickstart-transfer-base-to-eth</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">cd</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> bridge-kit-quickstart-transfer-base-to-eth</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> init</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> -y</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Install Bridge Kit and tools</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npm</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> install</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> @circle-fin/bridge-kit</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> @circle-fin/adapter-viem-v2</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> viem</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> typescript</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> tsx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> dotenv</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#set-up-your-development-environment\",\"isPage\":false,\"text\":\"Create a new directory and install Bridge Kit and its dependencies:# Setup your directory and initialize a Node.js project\\nmkdir bridge-kit-quickstart-transfer-base-to-eth\\ncd bridge-kit-quickstart-transfer-base-to-eth\\nnpm init -y\\n \\n# Install Bridge Kit and tools\\nnpm install @circle-fin/bridge-kit @circle-fin/adapter-viem-v2 viem typescript tsx dotenv\",\"title\":\"Set up your development environment\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#initialize-and-configure-the-project\",\"html\":\"<p>First, initialize the project, which creates a <code>tsconfig.json</code> file:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Initialize a TypeScript project</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> tsc</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> --init</span></span></code></pre><p>Then, edit the <code>tsconfig.json</code> file:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Replace the contents of the generated file</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">cat</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;&lt;</span><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\">&#x27;EOF&#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &gt;</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> tsconfig.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">  &quot;compilerOptions&quot;: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;target&quot;: &quot;ESNext&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;module&quot;: &quot;ESNext&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;moduleResolution&quot;: &quot;bundler&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;strict&quot;: true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\">EOF</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#initialize-and-configure-the-project\",\"isPage\":false,\"text\":\"First, initialize the project, which creates a tsconfig.json file:# Initialize a TypeScript project\\nnpx tsc --initThen, edit the tsconfig.json file:# Replace the contents of the generated file\\ncat &lt;&lt;&#x27;EOF&#x27; &gt; tsconfig.json\\n{\\n  &quot;compilerOptions&quot;: {\\n    &quot;target&quot;: &quot;ESNext&quot;,\\n    &quot;module&quot;: &quot;ESNext&quot;,\\n    &quot;moduleResolution&quot;: &quot;bundler&quot;,\\n    &quot;strict&quot;: true\\n  }\\n}\\nEOF\",\"title\":\"Initialize and configure the project\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#configure-environment-variables\",\"html\":\"<p>Create a <code>.env</code> file in the project directory and add your wallet private key, replacing <code>{YOUR_PRIVATE_KEY}</code> with the private key for your Ethereum Sepolia wallet. (You can find and export your private key in MetaMask.)</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">echo</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;PRIVATE_KEY={YOUR_PRIVATE_KEY}&quot;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &gt;</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> .env</span></span></code></pre><aside data-callout=\\\"warning\\\"><p>Never commit your private key to version control. Use environment variables or a secure key management system.</p></aside></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#configure-environment-variables\",\"isPage\":false,\"text\":\"Create a .env file in the project directory and add your wallet private key, replacing {YOUR_PRIVATE_KEY} with the private key for your Ethereum Sepolia wallet. (You can find and export your private key in MetaMask.)echo &quot;PRIVATE_KEY={YOUR_PRIVATE_KEY}&quot; &gt; .envNever commit your private key to version control. Use environment variables or a secure key management system.\",\"title\":\"Configure environment variables\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#fund-your-wallets\",\"html\":\"<p>For this quickstart, you need both USDC and native tokens in your Ethereum testnet wallet and native tokens in your Base testnet wallet. If you need USDC testnet tokens, use the <a href=\\\"https://faucet.circle.com\\\">Circle Faucet</a> to get 10 USDC in your Ethereum testnet wallet.</p><p>Use the following faucets to get testnet native tokens in your wallets:</p><ul>\\n<li><a href=\\\"https://sepoliafaucet.com\\\">Ethereum Sepolia faucet</a></li>\\n<li><a href=\\\"https://www.alchemy.com/faucets/base-sepolia\\\">Base Sepolia faucet</a></li>\\n</ul><aside data-callout=\\\"tip\\\"><p>Instead of using the Base Sepolia faucet, you can use the Ethereum Sepolia faucet to transfer some tokens to Base.</p></aside></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#fund-your-wallets\",\"isPage\":false,\"text\":\"For this quickstart, you need both USDC and native tokens in your Ethereum testnet wallet and native tokens in your Base testnet wallet. If you need USDC testnet tokens, use the Circle Faucet to get 10 USDC in your Ethereum testnet wallet.Use the following faucets to get testnet native tokens in your wallets:\\nEthereum Sepolia faucet\\nBase Sepolia faucet\\nInstead of using the Base Sepolia faucet, you can use the Ethereum Sepolia faucet to transfer some tokens to Base.\",\"title\":\"Fund your wallets\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#create-the-transfer-script\",\"html\":\"<p>Create an <code>index.ts</code> file in the project directory and add the following code. This code sets up your script and transfers 10 USDC from Base to Ethereum:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\" data-title=\\\"index.ts\\\" data-lang=\\\"ts\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Import Bridge Kit and its dependencies</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;dotenv/config&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { BridgeKit } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@circle-fin/bridge-kit&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { createAdapterFromPrivateKey } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;@circle-fin/adapter-viem-v2&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { inspect } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;util&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Initialize the SDK</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> kit</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> BridgeKit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> bridgeUSDC</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> ()</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Promise</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">void</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">&gt; </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Initialize the adapter which lets you transfer tokens from your wallet on any EVM-compatible chain</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> adapter</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createAdapterFromPrivateKey</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      privateKey: process.env.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">PRIVATE_KEY</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    });</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;---------------Starting Bridging---------------&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Execute the transfer using the same adapter for both source and destination chain</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> kit.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">bridge</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      from: { adapter, chain: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Base_Sepolia&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      to: { adapter, chain: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Ethereum_Sepolia&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      amount: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;10&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    });</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;RESULT&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">inspect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">null</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">catch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (err) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ERROR&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">inspect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">null</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">));</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">};</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">void</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> bridgeUSDC</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#create-the-transfer-script\",\"isPage\":false,\"text\":\"Create an index.ts file in the project directory and add the following code. This code sets up your script and transfers 10 USDC from Base to Ethereum:// Import Bridge Kit and its dependencies\\nimport &quot;dotenv/config&quot;;\\nimport { BridgeKit } from &quot;@circle-fin/bridge-kit&quot;;\\nimport { createAdapterFromPrivateKey } from &quot;@circle-fin/adapter-viem-v2&quot;;\\nimport { inspect } from &quot;util&quot;;\\n \\n// Initialize the SDK\\nconst kit = new BridgeKit();\\n \\nconst bridgeUSDC = async (): Promise&lt;void&gt; =&gt; {\\n  try {\\n    // Initialize the adapter which lets you transfer tokens from your wallet on any EVM-compatible chain\\n    const adapter = createAdapterFromPrivateKey({\\n      privateKey: process.env.PRIVATE_KEY as string,\\n    });\\n \\n    console.log(&quot;---------------Starting Bridging---------------&quot;);\\n \\n    // Execute the transfer using the same adapter for both source and destination chain\\n    const result = await kit.bridge({\\n      from: { adapter, chain: &quot;Base_Sepolia&quot; },\\n      to: { adapter, chain: &quot;Ethereum_Sepolia&quot; },\\n      amount: &quot;10&quot;,\\n    });\\n \\n    console.log(&quot;RESULT&quot;, inspect(result, false, null, true));\\n  } catch (err) {\\n    console.log(&quot;ERROR&quot;, inspect(err, false, null, true));\\n  }\\n};\\n \\nvoid bridgeUSDC();\",\"title\":\"Create the transfer script\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#run-the-transfer\",\"html\":\"<p>Save the <code>index.ts</code> file and run the script in your terminal:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">npx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> tsx</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> index.ts</span></span></code></pre></div><div data-depth=\\\"3\\\">\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#run-the-transfer\",\"isPage\":false,\"text\":\"Save the index.ts file and run the script in your terminal:npx tsx index.ts\",\"title\":\"Run the transfer\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]},{\"href\":\"/circle-usdc/guides/bridge-kit#verify-the-transfer\",\"html\":\"<p>After your script completes, find the returned <code>steps</code> array in the terminal output. Each transaction step includes an <code>explorerUrl</code> that you can visit to verify that the USDC amount matches the amount you transferred.</p><p>The following code is an example of how an <code>approve</code> step might look in the terminal output. The values are used in this example only and are not a real transaction:</p><pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">steps:</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">    name:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;approve&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">    state:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;success&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">    txHash:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;0x...txHash&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">    data:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      txHash:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">        &quot;0x...txHash&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      status:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;success&quot;,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      cumulativeGasUsed:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> 24567891n,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      gasUsed:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> 52843n,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      blockNumber:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> 8921456n,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      blockHash:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">        &quot;0x...blockHash&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      transactionIndex:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> 245,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      effectiveGasPrice:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> 1523456n,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">      explorerUrl:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">        &quot;https://sepolia.etherscan.io/tx/0x...txHash&quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span></code></pre><aside data-callout=\\\"tip\\\"><p><a href=\\\"https://learn.circle.com/bridge-kit/tutorials/collect-a-transfer-fee\\\">Collect a fee on transfers</a> and <a href=\\\"https://learn.circle.com/bridge-kit/tutorials/estimate-costs\\\">estimate gas and provider fees</a> before a transfer, only proceeding if the cost is acceptable.</p></aside></div></div>\",\"id\":\"pages/circle-usdc/guides/bridge-kit.mdx#verify-the-transfer\",\"isPage\":false,\"text\":\"After your script completes, find the returned steps array in the terminal output. Each transaction step includes an explorerUrl that you can visit to verify that the USDC amount matches the amount you transferred.The following code is an example of how an approve step might look in the terminal output. The values are used in this example only and are not a real transaction:steps: [\\n  {\\n    name: &quot;approve&quot;,\\n    state: &quot;success&quot;,\\n    txHash: &quot;0x...txHash&quot;,\\n    data: {\\n      txHash:\\n        &quot;0x...txHash&quot;,\\n      status: &quot;success&quot;,\\n      cumulativeGasUsed: 24567891n,\\n      gasUsed: 52843n,\\n      blockNumber: 8921456n,\\n      blockHash:\\n        &quot;0x...blockHash&quot;,\\n      transactionIndex: 245,\\n      effectiveGasPrice: 1523456n,\\n      explorerUrl:\\n        &quot;https://sepolia.etherscan.io/tx/0x...txHash&quot;,\\n    },\\n  },\\n]Collect a fee on transfers and estimate gas and provider fees before a transfer, only proceeding if the cost is acceptable.\",\"title\":\"Verify the transfer\",\"titles\":[\"Cross Chain USDC Transfers with Bridge Kit\",\"Steps\"]}]}}"

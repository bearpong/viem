"{\"value\":{\"code\":\"const signature = await account.signTransaction({\\n  chainId: 1,\\n  maxPriorityFeePerGas: parseGwei('3'), // [!code focus]\\n})\",\"nodes\":[{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\",\"start\":24,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signTransaction: <SerializeTransactionFn<TransactionSerializable>, {\\n    chainId: number;\\n    maxPriorityFeePerGas: bigint;\\n}>(transaction: {\\n    chainId: number;\\n    maxPriorityFeePerGas: bigint;\\n}, options?: {\\n    serializer?: SerializeTransactionFn<TransactionSerializable> | undefined;\\n} | undefined) => Promise<Hex>\",\"start\":32,\"length\":15,\"target\":\"signTransaction\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) chainId: number\",\"start\":52,\"length\":7,\"target\":\"chainId\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxPriorityFeePerGas: bigint\",\"start\":66,\"length\":20,\"target\":\"maxPriorityFeePerGas\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":88,\"length\":9,\"target\":\"parseGwei\",\"line\":2,\"character\":24}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,143]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import { parseGwei } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nconst account = privateKeyToAccount('0x...')\\n// ---cut---\\nconst signature = await account.signTransaction({\\n  chainId: 1,\\n  maxPriorityFeePerGas: parseGwei('3'), // [!code focus]\\n})\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"const signature: `0x${string}`\",\"start\":6,\"length\":9,\"target\":\"signature\",\"line\":0,\"character\":6},{\"type\":\"hover\",\"text\":\"const account: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\",\"start\":24,\"length\":7,\"target\":\"account\",\"line\":0,\"character\":24},{\"type\":\"hover\",\"text\":\"(property) signTransaction: <SerializeTransactionFn<TransactionSerializable>, {\\n    chainId: number;\\n    maxPriorityFeePerGas: bigint;\\n}>(transaction: {\\n    chainId: number;\\n    maxPriorityFeePerGas: bigint;\\n}, options?: {\\n    serializer?: SerializeTransactionFn<TransactionSerializable> | undefined;\\n} | undefined) => Promise<Hex>\",\"start\":32,\"length\":15,\"target\":\"signTransaction\",\"line\":0,\"character\":32},{\"type\":\"hover\",\"text\":\"(property) chainId: number\",\"start\":52,\"length\":7,\"target\":\"chainId\",\"line\":1,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) maxPriorityFeePerGas: bigint\",\"start\":66,\"length\":20,\"target\":\"maxPriorityFeePerGas\",\"line\":2,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) parseGwei(ether: string, unit?: \\\"wei\\\"): bigint\\nimport parseGwei\",\"docs\":\"Converts a string representation of gwei to numerical wei.\\n\\n- Docs: https://viem.sh/docs/utilities/parseGwei\",\"tags\":[[\"example\",\"import { parseGwei } from 'viem'\\n\\nparseGwei('420')\\n// 420000000000n\"]],\"start\":88,\"length\":9,\"target\":\"parseGwei\",\"line\":2,\"character\":24}],\"tags\":[]}}"

"{\"value\":{\"code\":\"import { toSoladySmartAccount } from 'viem/account-abstraction' // [!code focus]\\nimport { client, owner } from './config.js'\\n\\nconst account = await toSoladySmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owner, // [!code focus]\\n}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toSoladySmartAccount<entryPointAbi extends Abi = readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], entryPointVersion extends EntryPointVersion = \\\"0.7\\\">(parameters: ToSoladySmartAccountParameters<entryPointAbi, entryPointVersion>): Promise<ToSoladySmartAccountReturnType<entryPointAbi, entryPointVersion>>\\nimport toSoladySmartAccount\",\"tags\":[[\"description\",\"Create a Solady Smart Account – based off [Solady's `ERC4337.sol`](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC4337.sol).\"],[\"param\",\"parameters - {@link ToSoladySmartAccountParameters}\"],[\"returns\",\"Solady Smart Account. {@link ToSoladySmartAccountReturnType}\"],[\"example\",\"import { toSoladySmartAccount } from 'viem/account-abstraction'\\nimport { client } from './client.js'\\n\\nconst implementation = toSoladySmartAccount({\\n  client,\\n  owner: '0x...',\\n})\"]],\"start\":9,\"length\":20,\"target\":\"toSoladySmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    cacheTime: number;\\n    ccipRead?: false | {\\n        request?: (parameters: CcipRequestParameters) => Promise<CcipRequestReturnType>;\\n    } | undefined;\\n    chain: {\\n        blockExplorers: {\\n            readonly default: {\\n                readonly name: \\\"Etherscan\\\";\\n                readonly url: \\\"https://etherscan.io\\\";\\n                readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n            };\\n        };\\n        ... 13 more ...;\\n        serializers?: ChainSerializers<...> | undefined;\\n    };\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":90,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":98,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: ToSoladySmartAccountReturnType<readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], \\\"0.7\\\">\",\"start\":132,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toSoladySmartAccount<readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], \\\"0.7\\\">(parameters: ToSoladySmartAccountParameters<...>): Promise<...>\\nimport toSoladySmartAccount\",\"tags\":[[\"description\",\"Create a Solady Smart Account – based off [Solady's `ERC4337.sol`](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC4337.sol).\"],[\"param\",\"parameters - {@link ToSoladySmartAccountParameters}\"],[\"returns\",\"Solady Smart Account. {@link ToSoladySmartAccountReturnType}\"],[\"example\",\"import { toSoladySmartAccount } from 'viem/account-abstraction'\\nimport { client } from './client.js'\\n\\nconst implementation = toSoladySmartAccount({\\n  client,\\n  owner: '0x...',\\n})\"]],\"start\":148,\"length\":20,\"target\":\"toSoladySmartAccount\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":190,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owner: `0x${string}` | Account\",\"start\":217,\"length\":5,\"target\":\"owner\",\"line\":5,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,339]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"config.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/config.ts\",\"content\":\"// @filename: config.ts\\nimport { http, createPublicClient } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nexport const owner = privateKeyToAccount('0x...')\\n \\nexport const client = createPublicClient({\\n  chain: mainnet,\\n  transport: http(),\\n})\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":300,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { toSoladySmartAccount } from 'viem/account-abstraction' // [!code focus]\\nimport { client, owner } from './config.js'\\n\\nconst account = await toSoladySmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owner, // [!code focus]\\n}) // [!code focus]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toSoladySmartAccount<entryPointAbi extends Abi = readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], entryPointVersion extends EntryPointVersion = \\\"0.7\\\">(parameters: ToSoladySmartAccountParameters<entryPointAbi, entryPointVersion>): Promise<ToSoladySmartAccountReturnType<entryPointAbi, entryPointVersion>>\\nimport toSoladySmartAccount\",\"tags\":[[\"description\",\"Create a Solady Smart Account – based off [Solady's `ERC4337.sol`](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC4337.sol).\"],[\"param\",\"parameters - {@link ToSoladySmartAccountParameters}\"],[\"returns\",\"Solady Smart Account. {@link ToSoladySmartAccountReturnType}\"],[\"example\",\"import { toSoladySmartAccount } from 'viem/account-abstraction'\\nimport { client } from './client.js'\\n\\nconst implementation = toSoladySmartAccount({\\n  client,\\n  owner: '0x...',\\n})\"]],\"start\":9,\"length\":20,\"target\":\"toSoladySmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const client: {\\n    account: undefined;\\n    batch?: {\\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined;\\n    } | undefined;\\n    cacheTime: number;\\n    ccipRead?: false | {\\n        request?: (parameters: CcipRequestParameters) => Promise<CcipRequestReturnType>;\\n    } | undefined;\\n    chain: {\\n        blockExplorers: {\\n            readonly default: {\\n                readonly name: \\\"Etherscan\\\";\\n                readonly url: \\\"https://etherscan.io\\\";\\n                readonly apiUrl: \\\"https://api.etherscan.io/api\\\";\\n            };\\n        };\\n        ... 13 more ...;\\n        serializers?: ChainSerializers<...> | undefined;\\n    };\\n    ... 64 more ...;\\n    extend: <const client extends {\\n        ...;\\n    } & ExactPartial<...>>(fn: (client: Client<...>) => client) => Client<...>;\\n}\\nimport client\",\"start\":90,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":98,\"length\":5,\"target\":\"owner\",\"line\":1,\"character\":17},{\"type\":\"hover\",\"text\":\"const account: ToSoladySmartAccountReturnType<readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], \\\"0.7\\\">\",\"start\":132,\"length\":7,\"target\":\"account\",\"line\":3,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toSoladySmartAccount<readonly [{\\n    readonly inputs: readonly [{\\n        readonly name: \\\"success\\\";\\n        readonly type: \\\"bool\\\";\\n    }, {\\n        readonly name: \\\"ret\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"DelegateAndRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }];\\n    readonly name: \\\"FailedOp\\\";\\n    readonly type: \\\"error\\\";\\n}, {\\n    readonly inputs: readonly [{\\n        readonly name: \\\"opIndex\\\";\\n        readonly type: \\\"uint256\\\";\\n    }, {\\n        readonly name: \\\"reason\\\";\\n        readonly type: \\\"string\\\";\\n    }, {\\n        readonly name: \\\"inner\\\";\\n        readonly type: \\\"bytes\\\";\\n    }];\\n    readonly name: \\\"FailedOpWithRevert\\\";\\n    readonly type: \\\"error\\\";\\n}, ... 34 more ..., {\\n    ...;\\n}], \\\"0.7\\\">(parameters: ToSoladySmartAccountParameters<...>): Promise<...>\\nimport toSoladySmartAccount\",\"tags\":[[\"description\",\"Create a Solady Smart Account – based off [Solady's `ERC4337.sol`](https://github.com/Vectorized/solady/blob/main/src/accounts/ERC4337.sol).\"],[\"param\",\"parameters - {@link ToSoladySmartAccountParameters}\"],[\"returns\",\"Solady Smart Account. {@link ToSoladySmartAccountReturnType}\"],[\"example\",\"import { toSoladySmartAccount } from 'viem/account-abstraction'\\nimport { client } from './client.js'\\n\\nconst implementation = toSoladySmartAccount({\\n  client,\\n  owner: '0x...',\\n})\"]],\"start\":148,\"length\":20,\"target\":\"toSoladySmartAccount\",\"line\":3,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":190,\"length\":6,\"target\":\"client\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owner: `0x${string}` | Account\",\"start\":217,\"length\":5,\"target\":\"owner\",\"line\":5,\"character\":2}],\"tags\":[]}}"

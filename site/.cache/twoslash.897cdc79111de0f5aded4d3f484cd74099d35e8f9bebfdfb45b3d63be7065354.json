"{\"value\":{\"code\":\"import { toEcdsaKernelSmartAccount } from 'permissionless/accounts' // [!code focus]\\nimport { client } from './client.js'\\nimport { owner } from './owner.js'\\n\\nconst account = await toEcdsaKernelSmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owners: [owner], // [!code focus]\\n  version: '0.3.1', // [!code focus]\\n}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toEcdsaKernelSmartAccount<entryPointVersion extends \\\"0.6\\\" | \\\"0.7\\\", kernelVersion extends KernelVersion<entryPointVersion>, owner extends OneOf<EthereumProvider | WalletClient<Transport, Chain | undefined, Account> | LocalAccount>>(parameters: ToEcdsaKernelSmartAccountParameters<entryPointVersion, kernelVersion, owner>): Promise<ToEcdsaKernelSmartAccountReturnType<entryPointVersion>>\\nimport toEcdsaKernelSmartAccount\",\"tags\":[[\"deprecated\",\"ECDSA Kernel Smart Account is deprecated. Please use toKernelSmartAccount instead.\"],[\"see\",\"toKernelSmartAccount\"]],\"start\":9,\"length\":25,\"target\":\"toEcdsaKernelSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"import client\",\"start\":94,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":131,\"length\":5,\"target\":\"owner\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: object & Assign_<KernelSmartAccountImplementation<\\\"0.6\\\" | \\\"0.7\\\", false>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}\",\"start\":164,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toEcdsaKernelSmartAccount<\\\"0.6\\\" | \\\"0.7\\\", \\\"0.3.1\\\", OneOf<EthereumProvider | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | {\\n    ...;\\n}>>(parameters: ToEcdsaKernelSmartAccountParameters<...>): Promise<...>\\nimport toEcdsaKernelSmartAccount\",\"tags\":[[\"deprecated\",\"ECDSA Kernel Smart Account is deprecated. Please use toKernelSmartAccount instead.\"],[\"see\",\"toKernelSmartAccount\"]],\"start\":180,\"length\":25,\"target\":\"toEcdsaKernelSmartAccount\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":227,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: [OneOf<EthereumProvider | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | {\\n    ...;\\n}>]\",\"start\":254,\"length\":6,\"target\":\"owners\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":263,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) version?: \\\"0.3.1\\\" | undefined\",\"start\":290,\"length\":7,\"target\":\"version\",\"line\":7,\"character\":2}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,166]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"owner.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/owner.ts\",\"content\":\"// @filename: owner.ts\\nimport { privateKeyToAccount } from 'viem/accounts'\\n \\nexport const owner = privateKeyToAccount('0x...')\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":127,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { toEcdsaKernelSmartAccount } from 'permissionless/accounts' // [!code focus]\\nimport { client } from './client.js'\\nimport { owner } from './owner.js'\\n\\nconst account = await toEcdsaKernelSmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owners: [owner], // [!code focus]\\n  version: '0.3.1', // [!code focus]\\n}) // [!code focus]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toEcdsaKernelSmartAccount<entryPointVersion extends \\\"0.6\\\" | \\\"0.7\\\", kernelVersion extends KernelVersion<entryPointVersion>, owner extends OneOf<EthereumProvider | WalletClient<Transport, Chain | undefined, Account> | LocalAccount>>(parameters: ToEcdsaKernelSmartAccountParameters<entryPointVersion, kernelVersion, owner>): Promise<ToEcdsaKernelSmartAccountReturnType<entryPointVersion>>\\nimport toEcdsaKernelSmartAccount\",\"tags\":[[\"deprecated\",\"ECDSA Kernel Smart Account is deprecated. Please use toKernelSmartAccount instead.\"],[\"see\",\"toKernelSmartAccount\"]],\"start\":9,\"length\":25,\"target\":\"toEcdsaKernelSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"import client\",\"start\":94,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":131,\"length\":5,\"target\":\"owner\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: object & Assign_<KernelSmartAccountImplementation<\\\"0.6\\\" | \\\"0.7\\\", false>, {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}> & {\\n    address: Address;\\n    getNonce: NonNullable<SmartAccountImplementation[\\\"getNonce\\\"]>;\\n    isDeployed: () => Promise<boolean>;\\n    type: \\\"smart\\\";\\n}\",\"start\":164,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toEcdsaKernelSmartAccount<\\\"0.6\\\" | \\\"0.7\\\", \\\"0.3.1\\\", OneOf<EthereumProvider | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | {\\n    ...;\\n}>>(parameters: ToEcdsaKernelSmartAccountParameters<...>): Promise<...>\\nimport toEcdsaKernelSmartAccount\",\"tags\":[[\"deprecated\",\"ECDSA Kernel Smart Account is deprecated. Please use toKernelSmartAccount instead.\"],[\"see\",\"toKernelSmartAccount\"]],\"start\":180,\"length\":25,\"target\":\"toEcdsaKernelSmartAccount\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | JsonRpcAccount | undefined>\",\"start\":227,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owners: [OneOf<EthereumProvider | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | {\\n    ...;\\n}>]\",\"start\":254,\"length\":6,\"target\":\"owners\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":263,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":11},{\"type\":\"hover\",\"text\":\"(property) version?: \\\"0.3.1\\\" | undefined\",\"start\":290,\"length\":7,\"target\":\"version\",\"line\":7,\"character\":2}],\"tags\":[]}}"

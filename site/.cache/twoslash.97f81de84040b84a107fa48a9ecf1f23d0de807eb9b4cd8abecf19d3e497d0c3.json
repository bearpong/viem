"{\"value\":{\"code\":\"import { createWalletClient, custom } from 'viem'\\nimport { erc7811Actions } from 'viem/experimental'\\n\\nexport const walletClient = createWalletClient({\\n  transport: custom(window.ethereum!),\\n}).extend(erc7811Actions())\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function custom<provider extends EthereumProvider>(provider: provider, config?: CustomTransportConfig): CustomTransport\\nimport custom\",\"tags\":[[\"description\",\"Creates a custom transport given an EIP-1193 compliant `request` attribute.\"]],\"start\":29,\"length\":6,\"target\":\"custom\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function erc7811Actions(): <transport extends Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>) => Erc7811Actions<account>\\nimport erc7811Actions\",\"docs\":\"A suite of ERC-7811 Wallet Actions.\",\"tags\":[[\"example\",\"import { createPublicClient, createWalletClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7811Actions } from 'viem/experimental/erc7811'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7811Actions())\\n\\nconst response = await client.getAssets({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n})\"]],\"start\":59,\"length\":14,\"target\":\"erc7811Actions\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const walletClient: Client<CustomTransport, undefined, undefined, WalletRpcSchema, {\\n    getAssets: <aggregate extends boolean | ((asset: getAssets.Asset) => string) | undefined = undefined>(parameters: GetAssetsParameters<aggregate, undefined>) => Promise<GetAssetsReturnType<aggregate>>;\\n} & WalletActions<undefined, undefined>>\",\"start\":115,\"length\":12,\"target\":\"walletClient\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<CustomTransport, undefined, undefined, undefined>(parameters: {\\n    account?: `0x${string}` | Account | undefined;\\n    cacheTime?: number | undefined | undefined;\\n    ccipRead?: {\\n        request?: (parameters: CcipRequestParameters) => Promise<CcipRequestReturnType>;\\n    } | false | undefined | undefined;\\n    ... 5 more ...;\\n    transport: CustomTransport;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":130,\"length\":18,\"target\":\"createWalletClient\",\"line\":3,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) transport: CustomTransport\",\"docs\":\"The RPC transport\",\"start\":153,\"length\":9,\"target\":\"transport\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) custom<{\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n}>(provider: {\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n}, config?: CustomTransportConfig): CustomTransport\\nimport custom\",\"tags\":[[\"description\",\"Creates a custom transport given an EIP-1193 compliant `request` attribute.\"]],\"start\":164,\"length\":6,\"target\":\"custom\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"var window: Window & typeof globalThis\",\"docs\":\"The **`window`** property of a Window object points to the window object itself.\\n\\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)\",\"start\":171,\"length\":6,\"target\":\"window\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) Window.ethereum?: {\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n} | undefined\",\"start\":178,\"length\":8,\"target\":\"ethereum\",\"line\":4,\"character\":27},{\"type\":\"hover\",\"text\":\"(property) extend: <Erc7811Actions<undefined>>(fn: (client: Client<CustomTransport, undefined, undefined, WalletRpcSchema, WalletActions<undefined, undefined>>) => Erc7811Actions<undefined>) => Client<CustomTransport, undefined, undefined, WalletRpcSchema, {\\n    getAssets: <aggregate>(parameters: GetAssetsParameters<aggregate, undefined>) => Promise<GetAssetsReturnType<aggregate>>;\\n} & WalletActions<...>>\",\"start\":193,\"length\":6,\"target\":\"extend\",\"line\":5,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) erc7811Actions(): <transport extends Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>) => Erc7811Actions<account>\\nimport erc7811Actions\",\"docs\":\"A suite of ERC-7811 Wallet Actions.\",\"tags\":[[\"example\",\"import { createPublicClient, createWalletClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7811Actions } from 'viem/experimental/erc7811'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7811Actions())\\n\\nconst response = await client.getAssets({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n})\"]],\"start\":200,\"length\":14,\"target\":\"erc7811Actions\",\"line\":5,\"character\":10}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,34]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"index.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/index.ts\",\"content\":\"import 'viem/window'\\n// ---cut---\\nimport { createWalletClient, custom } from 'viem'\\nimport { erc7811Actions } from 'viem/experimental'\\n\\nexport const walletClient = createWalletClient({\\n  transport: custom(window.ethereum!),\\n}).extend(erc7811Actions())\",\"extension\":\"ts\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function createWalletClient<transport extends Transport, chain extends Chain | undefined = undefined, accountOrAddress extends Account | Address | undefined = undefined, rpcSchema extends RpcSchema | undefined = undefined>(parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":9,\"length\":18,\"target\":\"createWalletClient\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) function custom<provider extends EthereumProvider>(provider: provider, config?: CustomTransportConfig): CustomTransport\\nimport custom\",\"tags\":[[\"description\",\"Creates a custom transport given an EIP-1193 compliant `request` attribute.\"]],\"start\":29,\"length\":6,\"target\":\"custom\",\"line\":0,\"character\":29},{\"type\":\"hover\",\"text\":\"(alias) function erc7811Actions(): <transport extends Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>) => Erc7811Actions<account>\\nimport erc7811Actions\",\"docs\":\"A suite of ERC-7811 Wallet Actions.\",\"tags\":[[\"example\",\"import { createPublicClient, createWalletClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7811Actions } from 'viem/experimental/erc7811'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7811Actions())\\n\\nconst response = await client.getAssets({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n})\"]],\"start\":59,\"length\":14,\"target\":\"erc7811Actions\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"const walletClient: Client<CustomTransport, undefined, undefined, WalletRpcSchema, {\\n    getAssets: <aggregate extends boolean | ((asset: getAssets.Asset) => string) | undefined = undefined>(parameters: GetAssetsParameters<aggregate, undefined>) => Promise<GetAssetsReturnType<aggregate>>;\\n} & WalletActions<undefined, undefined>>\",\"start\":115,\"length\":12,\"target\":\"walletClient\",\"line\":3,\"character\":13},{\"type\":\"hover\",\"text\":\"(alias) createWalletClient<CustomTransport, undefined, undefined, undefined>(parameters: {\\n    account?: `0x${string}` | Account | undefined;\\n    cacheTime?: number | undefined | undefined;\\n    ccipRead?: {\\n        request?: (parameters: CcipRequestParameters) => Promise<CcipRequestReturnType>;\\n    } | false | undefined | undefined;\\n    ... 5 more ...;\\n    transport: CustomTransport;\\n}): {\\n    ...;\\n}\\nimport createWalletClient\",\"docs\":\"Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\\n\\n- Docs: https://viem.sh/docs/clients/wallet\\n\\nA Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\\n\\nThe Wallet Client supports signing over:\\n- [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\\n- [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\",\"tags\":[[\"param\",\"config - {@link WalletClientConfig}\"],[\"returns\",\"A Wallet Client. {@link WalletClient}\"],[\"example\",\"// JSON-RPC Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: custom(window.ethereum),\\n})\"],[\"example\",\"// Local Account\\nimport { createWalletClient, custom } from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nimport { mainnet } from 'viem/chains'\\n\\nconst client = createWalletClient({\\n  account: privateKeyToAccount('0x…')\\n  chain: mainnet,\\n  transport: http(),\\n})\"]],\"start\":130,\"length\":18,\"target\":\"createWalletClient\",\"line\":3,\"character\":28},{\"type\":\"hover\",\"text\":\"(property) transport: CustomTransport\",\"docs\":\"The RPC transport\",\"start\":153,\"length\":9,\"target\":\"transport\",\"line\":4,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) custom<{\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n}>(provider: {\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n}, config?: CustomTransportConfig): CustomTransport\\nimport custom\",\"tags\":[[\"description\",\"Creates a custom transport given an EIP-1193 compliant `request` attribute.\"]],\"start\":164,\"length\":6,\"target\":\"custom\",\"line\":4,\"character\":13},{\"type\":\"hover\",\"text\":\"var window: Window & typeof globalThis\",\"docs\":\"The **`window`** property of a Window object points to the window object itself.\\n\\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)\",\"start\":171,\"length\":6,\"target\":\"window\",\"line\":4,\"character\":20},{\"type\":\"hover\",\"text\":\"(property) Window.ethereum?: {\\n    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;\\n    request: EIP1193RequestFn<EIP1474Methods>;\\n} | undefined\",\"start\":178,\"length\":8,\"target\":\"ethereum\",\"line\":4,\"character\":27},{\"type\":\"hover\",\"text\":\"(property) extend: <Erc7811Actions<undefined>>(fn: (client: Client<CustomTransport, undefined, undefined, WalletRpcSchema, WalletActions<undefined, undefined>>) => Erc7811Actions<undefined>) => Client<CustomTransport, undefined, undefined, WalletRpcSchema, {\\n    getAssets: <aggregate>(parameters: GetAssetsParameters<aggregate, undefined>) => Promise<GetAssetsReturnType<aggregate>>;\\n} & WalletActions<...>>\",\"start\":193,\"length\":6,\"target\":\"extend\",\"line\":5,\"character\":3},{\"type\":\"hover\",\"text\":\"(alias) erc7811Actions(): <transport extends Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>) => Erc7811Actions<account>\\nimport erc7811Actions\",\"docs\":\"A suite of ERC-7811 Wallet Actions.\",\"tags\":[[\"example\",\"import { createPublicClient, createWalletClient, http } from 'viem'\\nimport { mainnet } from 'viem/chains'\\nimport { erc7811Actions } from 'viem/experimental/erc7811'\\n\\nconst client = createWalletClient({\\n  chain: mainnet,\\n  transport: http(),\\n}).extend(erc7811Actions())\\n\\nconst response = await client.getAssets({\\n  account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\\n})\"]],\"start\":200,\"length\":14,\"target\":\"erc7811Actions\",\"line\":5,\"character\":10}],\"tags\":[]}}"

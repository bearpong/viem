"{\"value\":{\"code\":\"import { toTrustSmartAccount } from 'permissionless/accounts' // [!code focus]\\nimport { client } from './client.js'\\nimport { owner } from './owner.js'\\n\\nconst account = await toTrustSmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owner: owner, // [!code focus]\\n}) // [!code focus]\",\"nodes\":[{\"type\":\"hover\",\"text\":\"(alias) function toTrustSmartAccount(parameters: ToTrustSmartAccountParameters): Promise<ToTrustSmartAccountReturnType>\\nimport toTrustSmartAccount\",\"tags\":[[\"description\",\"Creates an Trust Smart Account from a private key.\"],[\"returns\",\"A Private Key Trust Smart Account.\"]],\"start\":9,\"length\":19,\"target\":\"toTrustSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"import client\",\"start\":88,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":125,\"length\":5,\"target\":\"owner\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: ToTrustSmartAccountReturnType\",\"start\":158,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toTrustSmartAccount(parameters: ToTrustSmartAccountParameters): Promise<ToTrustSmartAccountReturnType>\\nimport toTrustSmartAccount\",\"tags\":[[\"description\",\"Creates an Trust Smart Account from a private key.\"],[\"returns\",\"A Private Key Trust Smart Account.\"]],\"start\":174,\"length\":19,\"target\":\"toTrustSmartAccount\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, JsonRpcAccount | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | undefined>\",\"start\":215,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owner: OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | EthereumProvider | {\\n    ...;\\n}>\",\"start\":242,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":249,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":9}],\"meta\":{\"extension\":\"ts\",\"compilerOptions\":{\"strict\":true,\"module\":99,\"target\":99,\"allowJs\":true,\"skipDefaultLibCheck\":true,\"skipLibCheck\":true,\"moduleDetection\":3,\"baseUrl\":\"/Users/jakemoxey/git/viem/site/\"},\"handbookOptions\":{\"errors\":[],\"noErrors\":false,\"noErrorsCutted\":false,\"noErrorValidation\":false,\"noStaticSemanticInfo\":false,\"showEmit\":false,\"keepNotations\":false},\"removals\":[[0,166]],\"flagNotations\":[],\"virtualFiles\":[{\"offset\":0,\"filename\":\"owner.ts\",\"filepath\":\"/Users/jakemoxey/git/viem/site/owner.ts\",\"content\":\"// @filename: owner.ts\\nimport { privateKeyToAccount } from 'viem/accounts'\\n \\nexport const owner = privateKeyToAccount('0x...')\\n\",\"extension\":\"ts\",\"supportLsp\":true},{\"offset\":127,\"filename\":\"example.js\",\"filepath\":\"/Users/jakemoxey/git/viem/site/example.js\",\"content\":\"// @filename: example.js\\n\\n// ---cut---\\nimport { toTrustSmartAccount } from 'permissionless/accounts' // [!code focus]\\nimport { client } from './client.js'\\nimport { owner } from './owner.js'\\n\\nconst account = await toTrustSmartAccount({ // [!code focus]\\n  client, // [!code focus]\\n  owner: owner, // [!code focus]\\n}) // [!code focus]\",\"extension\":\"js\",\"supportLsp\":true}],\"positionQueries\":[],\"positionCompletions\":[],\"positionHighlights\":[]},\"queries\":[],\"completions\":[],\"errors\":[],\"highlights\":[],\"hovers\":[{\"type\":\"hover\",\"text\":\"(alias) function toTrustSmartAccount(parameters: ToTrustSmartAccountParameters): Promise<ToTrustSmartAccountReturnType>\\nimport toTrustSmartAccount\",\"tags\":[[\"description\",\"Creates an Trust Smart Account from a private key.\"],[\"returns\",\"A Private Key Trust Smart Account.\"]],\"start\":9,\"length\":19,\"target\":\"toTrustSmartAccount\",\"line\":0,\"character\":9},{\"type\":\"hover\",\"text\":\"import client\",\"start\":88,\"length\":6,\"target\":\"client\",\"line\":1,\"character\":9},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":125,\"length\":5,\"target\":\"owner\",\"line\":2,\"character\":9},{\"type\":\"hover\",\"text\":\"const account: ToTrustSmartAccountReturnType\",\"start\":158,\"length\":7,\"target\":\"account\",\"line\":4,\"character\":6},{\"type\":\"hover\",\"text\":\"(alias) toTrustSmartAccount(parameters: ToTrustSmartAccountParameters): Promise<ToTrustSmartAccountReturnType>\\nimport toTrustSmartAccount\",\"tags\":[[\"description\",\"Creates an Trust Smart Account from a private key.\"],[\"returns\",\"A Private Key Trust Smart Account.\"]],\"start\":174,\"length\":19,\"target\":\"toTrustSmartAccount\",\"line\":4,\"character\":22},{\"type\":\"hover\",\"text\":\"(property) client: Client<Transport, Chain | undefined, JsonRpcAccount | {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | undefined>\",\"start\":215,\"length\":6,\"target\":\"client\",\"line\":5,\"character\":2},{\"type\":\"hover\",\"text\":\"(property) owner: OneOf<{\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign?: ((parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>) | undefined | undefined;\\n    signAuthorization?: ((parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>) | undefined | undefined;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    ... 4 more ...;\\n    type: \\\"local\\\";\\n} | EthereumProvider | {\\n    ...;\\n}>\",\"start\":242,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":2},{\"type\":\"hover\",\"text\":\"(alias) const owner: {\\n    address: Address;\\n    nonceManager?: NonceManager | undefined;\\n    sign: (parameters: {\\n        hash: Hash;\\n    }) => Promise<Hex>;\\n    signAuthorization: (parameters: AuthorizationRequest) => Promise<SignAuthorizationReturnType>;\\n    signMessage: ({ message }: {\\n        message: SignableMessage;\\n    }) => Promise<Hex>;\\n    signTransaction: <serializer extends SerializeTransactionFn<TransactionSerializable> = SerializeTransactionFn<TransactionSerializable>, transaction extends Parameters<serializer>[0] = Parameters<serializer>[0]>(transaction: transaction, options?: {\\n        serializer?: serializer | undefined;\\n    } | undefined) => Promise<Hex>;\\n    signTypedData: <const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | \\\"EIP712Domain\\\" = keyof typedData>(parameters: TypedDataDefinition<typedData, primaryType>) => Promise<Hex>;\\n    publicKey: Hex;\\n    source: \\\"privateKey\\\";\\n    type: \\\"local\\\";\\n}\\nimport owner\",\"start\":249,\"length\":5,\"target\":\"owner\",\"line\":6,\"character\":9}],\"tags\":[]}}"
